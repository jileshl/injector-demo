apply plugin: 'com.android.library'
apply plugin: 'app.artyomd.injector'
apply plugin: 'com.github.dcendents.android-maven'


buildscript {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.0'
        classpath 'app.artyomd.injector:injector:0.3.6'
    }
}

group ='com.github.jileshl'

injectConfig{
    enabled = true
    groups = [
            "amazonlib": ["com.example.amazonlib"],
            "amazonPay": ["amazonpay.silentpay.AmazonPay"]
    ]
    dexLoaction = "/outputs/inject/amazonlib.dex"
}

android {
    compileSdkVersion 28


    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

allprojects {
    repositories {
        jcenter()
        flatDir {
            dirs 'libs'
        }
    }
}

//artifacts {
//    archives applicationBundle
//}

//configurations.maybeCreate("default")
//artifacts.add("default", file('libs/AmazonIdentityMobileAndroidSDK.aar'))
//artifacts.add("default", file('libs/PWAINSilentPayAndroidSDK.aar'))
apply plugin: 'maven-publish'
publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/AmazonIdentityMobileAndroidSDK.aar")
            groupId 'com.amazon.identity'
            artifactId 'AmazonIdentityMobileAndroidSDK'
            version '1'

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
        Sandbox(MavenPublication) {
            artifact("$buildDir/outputs/aar/PWAINSilentPayAndroidSDK.aar")
            groupId 'amazonpay.silentpay'
            artifactId 'PWAINSilentPayAndroidSDK'
            version '1-SANDBOX'

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
        Sandbox(MavenPublication) {
            artifact("$buildDir/outputs/aar/AmazonIdentityMobileAndroidSDK.aar")
            groupId 'com.amazon.identity'
            artifactId 'AmazonIdentityMobileAndroidSDK'
            version '1-SANDBOX'

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/PWAINSilentPayAndroidSDK.aar")
            groupId 'amazonpay.silentpay'
            artifactId 'PWAINSilentPayAndroidSDK'
            version '1'

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])
    implementation 'com.android.support:customtabs:28.0.0'
    implementation(name:'AmazonIdentityMobileAndroidSDK', ext:"aar")
    implementation(name:'PWAINSilentPayAndroidSDK', ext:"aar")
    /*debugImplementation files('libs/AmazonIdentityMobileAndroidSDK.aar')
    releaseImplementation files('libs/AmazonIdentityMobileAndroidSDK.aar')

    debugImplementation files('libs/PWAINSilentPayAndroidSDK.aar')
    releaseImplementation files('libs/PWAINSilentPayAndroidSDK.aar')*/
}